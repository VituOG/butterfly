// Elementos DOM
const classOptions = document.querySelectorAll('.class-options .option-card');
const itemOptions = document.querySelectorAll('.item-options .option-card');
const characterNameInput = document.getElementById('characterName');
const startGameButton = document.getElementById('startGameButton');
const characterCreationSection = document.querySelector('.character-creation-section');
const cutsceneSection = document.querySelector('.cutscene-section');
const introCutscene = document.getElementById('introCutscene'); // √â um iframe agora
const pressAnyButtonCutscene = document.getElementById('pressAnyButtonCutscene'); // Novo elemento
const gamePlaySection = document.querySelector('.game-play-section-new');
const displayPlayerName = document.getElementById('displayPlayerName');
const displayPlayerClass = document.getElementById('displayPlayerClass');
const playerImage = document.getElementById('playerImage');

// Novos elementos para a se√ß√£o de carregamento de jogo
const loadGameSection = document.querySelector('.load-game-section');
const savedCharactersContainer = document.getElementById('savedCharactersContainer');
const backToCreationButton = document.getElementById('backToCreationButton');

// Novos elementos para exibir informa√ß√µes detalhadas do jogador na bottom-bar
const playerFullBodyImage = document.getElementById('playerFullBodyImage');
const playerDetailedLevel = document.getElementById('playerDetailedLevel');
const playerDetailedHP = document.getElementById('playerDetailedHP');
const playerDetailedMaxHP = document.getElementById('playerDetailedMaxHP');
const playerStat1 = document.getElementById('playerStat1');
const playerStat2 = document.getElementById('playerStat2');
const playerStat3 = document.getElementById('playerStat3');
const playerStat1Icon = document.getElementById('playerStat1Icon');
const playerStat2Icon = document.getElementById('playerStat2Icon');
const playerStat3Icon = document.getElementById('playerStat3Icon');

const playerHP = document.getElementById('playerHP'); // Refer√™ncia para HP da top-bar
const playerMaxHP = document.getElementById('playerMaxHP'); // Refer√™ncia para MaxHP da top-bar
const playerLevel = document.getElementById('playerLevel'); // Refer√™ncia para Level da top-bar

// Refer√™ncias para barras de vida (preenchimento)
const playerHealthBar = document.getElementById('playerHealthBar');
const enemyHealthBar = document.getElementById('enemyHealthBar');

// Vari√°veis para armazenar as escolhas do jogador
let selectedClass = null;
let selectedItem = null;

// Estrutura para um personagem salvo
class CharacterSave {
    constructor(name, charClass, item) {
        this.name = name;
        this.class = charClass;
        this.item = item;
        // Poder√≠amos adicionar mais propriedades aqui no futuro, como hp, xp, etc.
    }
}

// Fun√ß√£o para salvar o personagem atual no localStorage
function saveCharacter() {
    if (!selectedClass || !selectedItem || !characterNameInput.value.trim()) {
        console.error("N√£o √© poss√≠vel salvar: informa√ß√µes do personagem incompletas.");
        return;
    }

    const newCharacter = new CharacterSave(
        characterNameInput.value.trim(),
        selectedClass,
        selectedItem
    );

    let savedCharacters = loadCharacters(); // Carrega os personagens existentes
    savedCharacters.push(newCharacter); // Adiciona o novo personagem

    localStorage.setItem('eldenRingSaves', JSON.stringify(savedCharacters));
    console.log("Personagem salvo!", newCharacter);
}

// Fun√ß√£o para carregar todos os personagens salvos do localStorage
function loadCharacters() {
    const saves = localStorage.getItem('eldenRingSaves');
    return saves ? JSON.parse(saves) : [];
}

// Fun√ß√£o para renderizar os personagens salvos na tela de carregamento
function renderSavedCharacters() {
    savedCharactersContainer.innerHTML = ''; // Limpa o container antes de renderizar
    const characters = loadCharacters();

    if (characters.length === 0) {
        savedCharactersContainer.innerHTML = '<p class="no-saves-message">Nenhum personagem salvo encontrado.</p>';
        return;
    }

    characters.forEach((char, index) => {
        const card = document.createElement('div');
        card.classList.add('option-card');
        card.dataset.index = index; // Para identificar qual personagem carregar

        const className = char.class.charAt(0).toUpperCase() + char.class.slice(1);
        const itemName = char.item.replace(/_/g, ' ').toUpperCase();

        card.innerHTML = `
            <img src="${classImages[char.class]}" alt="${className}" class="choice-image">
            <p class="choice-name">${char.name}</p>
            <p class="choice-details">${className} | ${itemName}</p>
        `;
        savedCharactersContainer.appendChild(card);

        card.addEventListener('click', () => {
            loadCharacter(index);
        });
    });
}

// Fun√ß√£o para carregar um personagem espec√≠fico do save
function loadCharacter(index) {
    const characters = loadCharacters();
    if (index >= 0 && index < characters.length) {
        const charToLoad = characters[index];
        selectedClass = charToLoad.class;
        selectedItem = charToLoad.item;
        characterNameInput.value = charToLoad.name; // Preenche o campo de nome

        // Ocultar a se√ß√£o de carregamento e iniciar o jogo
        loadGameSection.style.display = 'none';
        characterCreationSection.style.display = 'none'; // Certifica que a cria√ß√£o tamb√©m est√° oculta

        // Definir as informa√ß√µes para a nova se√ß√£o de game-play
        displayPlayerClass.textContent = charToLoad.class.toUpperCase();
        displayPlayerName.textContent = charToLoad.name;

        // Atualizar informa√ß√µes da top-bar
        playerHP.textContent = '100'; // Placeholder
        playerMaxHP.textContent = '100'; // Placeholder
        playerLevel.textContent = '1'; // Placeholder
        playerHealthBar.style.width = '100%'; // HP cheio

        // Atualizar informa√ß√µes detalhadas na bottom-bar
        playerFullBodyImage.src = classImagesFullBody[selectedClass];
        playerDetailedLevel.textContent = '1'; // Placeholder
        playerDetailedHP.textContent = '100'; // Placeholder
        playerDetailedMaxHP.textContent = '100'; // Placeholder
        playerStat1.textContent = '2734'; // Placeholder
        playerStat2.textContent = '760'; // Placeholder
        playerStat3.textContent = '1412'; // Placeholder

        // Placeholders para √≠cones de stats (se houver imagens)
        playerStat1Icon.innerHTML = '‚ù§Ô∏è'; // Exemplo de √≠cone de texto
        playerStat2Icon.innerHTML = 'üíß';
        playerStat3Icon.innerHTML = '‚ö°';

        // Exibir a nova se√ß√£o de game-play (sem cutscene para personagens carregados)
        gamePlaySection.style.display = 'flex'; // Usar 'flex' para exibir a nova se√ß√£o
        playerImage.src = classImages[selectedClass]; // Atualiza a imagem do jogador

        console.log("Personagem carregado:", charToLoad);
    }
}

// Mapeamento de classes para suas imagens padr√£o
const classImages = {
    samurai: 'img/samurai.jpg',
    vagabond: 'img/vagabundo.jpg',
    prophet: 'img/profeta.jpg',
    // Adicione mais classes e seus caminhos de imagem aqui
};

// Mapeamento de classes para suas imagens de corpo inteiro (PLACEHOLDER)
const classImagesFullBody = {
    samurai: 'img/samurai.jpg', // Usando a mesma por enquanto, ajustar conforme necess√°rio
    vagabond: 'img/vagabundo.jpg',
    prophet: 'img/profeta.jpg',
};

// Fun√ß√£o para lidar com a sele√ß√£o de op√ß√µes (classe ou item)
function handleOptionSelection(options, type) {
    options.forEach(card => {
        card.addEventListener('click', () => {
            // Remover a classe 'selected' de todos os cart√µes do mesmo tipo
            options.forEach(c => c.classList.remove('selected'));
            // Adicionar a classe 'selected' ao cart√£o clicado
            card.classList.add('selected');

            const choice = card.dataset.choice;
            if (type === 'class') {
                selectedClass = choice;
                // Atualiza a imagem do jogador imediatamente ao selecionar a classe
                playerImage.src = classImages[selectedClass];
            } else if (type === 'item') {
                selectedItem = choice;
            }
        });
    });
}

// Aplicar a l√≥gica de sele√ß√£o para classes e itens
handleOptionSelection(classOptions, 'class');
handleOptionSelection(itemOptions, 'item');

// L√≥gica para o bot√£o 'BEGIN JOURNEY'
startGameButton.addEventListener('click', () => {
    const characterName = characterNameInput.value.trim();

    if (!selectedClass || !selectedItem || !characterName) {
        alert('Por favor, escolha sua classe, item especial e insira seu nome para come√ßar a jornada.');
        return;
    }

    // Salvar o personagem antes de avan√ßar
    saveCharacter();

    // Ocultar a se√ß√£o de cria√ß√£o de personagem
    characterCreationSection.style.display = 'none';

    // Exibir a se√ß√£o da cutscene com fade-in
    cutsceneSection.style.display = 'flex';
    setTimeout(() => {
        cutsceneSection.classList.add('active');
    }, 10);

    // Definir as informa√ß√µes para a se√ß√£o de game-play (movido para loadCharacter para reutiliza√ß√£o)
    // A se√ß√£o de game-play ser√° exibida AP√ìS a cutscene, na fun√ß√£o advanceCutscene
});

// L√≥gica para o bot√£o 'BACK TO CHARACTER CREATION'
backToCreationButton.addEventListener('click', () => {
    loadGameSection.style.display = 'none';
    characterCreationSection.style.display = 'block';
    // Limpar sele√ß√µes e nome ao voltar para a cria√ß√£o (opcional)
    selectedClass = null;
    selectedItem = null;
    characterNameInput.value = '';
    classOptions.forEach(c => c.classList.remove('selected'));
    itemOptions.forEach(c => c.classList.remove('selected'));
    playerImage.src = ''; // Limpa a imagem do jogador
});

// L√≥gica para avan√ßar a cutscene ao pressionar qualquer bot√£o ou clicar
function advanceCutscene() {
    if (cutsceneSection.classList.contains('active')) {
        // Ocultar a se√ß√£o da cutscene com fade-out
        cutsceneSection.classList.remove('active');
        // Remover o listener de evento para n√£o disparar novamente
        window.removeEventListener('keydown', advanceCutscene);
        window.removeEventListener('click', advanceCutscene);

        // Pequeno atraso para o fade-out antes de ocultar o display
        setTimeout(() => {
            cutsceneSection.style.display = 'none';
            gamePlaySection.style.display = 'flex'; // Usar 'flex' para exibir a nova se√ß√£o ap√≥s a cutscene
            // Definir as informa√ß√µes para a game-play-section-new se for um NEW GAME
            displayPlayerClass.textContent = selectedClass.toUpperCase();
            displayPlayerName.textContent = characterNameInput.value.trim();

            // Atualizar informa√ß√µes da top-bar
            playerHP.textContent = '100'; // Placeholder
            playerMaxHP.textContent = '100'; // Placeholder
            playerLevel.textContent = '1'; // Placeholder
            playerHealthBar.style.width = '100%'; // HP cheio

            // Atualizar informa√ß√µes detalhadas na bottom-bar
            playerFullBodyImage.src = classImagesFullBody[selectedClass];
            playerDetailedLevel.textContent = '1'; // Placeholder
            playerDetailedHP.textContent = '100'; // Placeholder
            playerDetailedMaxHP.textContent = '100'; // Placeholder
            playerStat1.textContent = '2734'; // Placeholder
            playerStat2.textContent = '760'; // Placeholder
            playerStat3.textContent = '1412'; // Placeholder

            // Placeholders para √≠cones de stats (se houver imagens)
            playerStat1Icon.innerHTML = '‚ù§Ô∏è'; // Exemplo de √≠cone de texto
            playerStat2Icon.innerHTML = 'üíß';
            playerStat3Icon.innerHTML = '‚ö°';

            playerImage.src = classImages[selectedClass];
        }, 1500); // Deve ser igual √† dura√ß√£o da transi√ß√£o CSS do fade-out
    }
}

// Adicionar listeners para teclado e clique para avan√ßar a cutscene
// Estes listeners s√≥ ter√£o efeito quando a cutsceneSection estiver ativa
window.addEventListener('keydown', advanceCutscene);
window.addEventListener('click', advanceCutscene);

// L√≥gica de inicializa√ß√£o da p√°gina
// Verifica se a p√°gina foi carregada para exibir a se√ß√£o de carregamento de jogo
document.addEventListener('DOMContentLoaded', () => {
    const urlParams = new URLSearchParams(window.location.search);
    const action = urlParams.get('action');

    if (action === 'load') {
        characterCreationSection.style.display = 'none';
        cutsceneSection.style.display = 'none';
        gamePlaySection.style.display = 'none';
        loadGameSection.style.display = 'block';
        renderSavedCharacters();
    } else {
        // Se n√£o for para carregar jogo, garanta que a se√ß√£o de cria√ß√£o de personagem esteja vis√≠vel
        characterCreationSection.style.display = 'block';
        loadGameSection.style.display = 'none';
        cutsceneSection.style.display = 'none';
        gamePlaySection.style.display = 'none'; // Oculta a nova se√ß√£o tamb√©m por padr√£o
    }
}); 